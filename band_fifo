`timescale 1ns/10ps

module band_fifo( clk, 
                  rst,
                  we,				//fifo数据到来信号
                  send_enable,		//上个fifo发送完毕给本个fifo的发送信号
                  data_in,			
                  data_out,
                  data_ready,		//可以发送数据的信号
                  next_enable		//下个fifo可以发送数据的信号
                );

parameter depth = 2048;

input clk;
input rst;
input we;
input send_enable;
input[11:0] data_in;

output[11:0] data_out;
output data_ready;
output next_enable;

reg[11:0] data_out;
reg data_ready;
reg next_enable;

//定义临时寄存器
reg[12:0] w_ptr;  //写指针
reg[12:0] r_ptr;  //读指针
reg[12:0] count;  //开始输入时，fifo现有数据数
reg[12:0] left;   //开始输出后，fifo剩余数据数

reg[31:0] fifo_ram[0:depth];  //fifo的ram

//往FIFO中写数据
always @(posedge clk or negedge rst) begin
  if(~rst) begin
    
    w_ptr <= 13'b0;
    r_ptr <= 13'b0;
    count <= 12'b0;
    left <= depth + 1;

  end
  else if(we) begin
    
    fifo_ram[w_ptr] <= data_in;
    w_ptr <= w_ptr + 1;
    count <= count + 1;

  end
  else begin
    
    w_ptr <= w_ptr;
    count <= count;

  end

end

//计数器满，从FIFO中输出数据
always @(posedge clk ) begin

  if( (count == depth + 1) && send_enable && left != 0) begin
    
    data_out <= fifo_ram[r_ptr];
    data_ready <= 1;
    r_ptr <= r_ptr + 1;
    left <= left - 1;

  end
  else begin

    r_ptr <= r_ptr;
    left <= left;

  end

end

//本个fifo传输完毕，给下一个fifo使能信号
always @(posedge clk ) begin
  
  if(left == 1) begin
    
    next_enable <= 1;

  end
  else if(left == 0) begin
    
    data_ready <= 0;
    
  end
  else begin
    
    next_enable <= next_enable;

  end

end

endmodule
