`timescale 1ns/10ps

//把转存下的小波系数，划分为precinct，以precinct为单位输出，为位平面数计算做准备〿

module fill_precinct(   clk, 
                        rst, 
                        rdy,

                        image_width,
                        image_height,

                        Y_LL_5_1,
                        enable_Y_LL_5_1,
                        Y_HL_5_1,
                        enable_Y_HL_5_1,
                        Y_HL_4_1,
                        enable_Y_HL_4_1,
                        Y_HL_3_1,
                        enable_Y_HL_3_1,
                        Y_HL_2_1,
                        enable_Y_HL_2_1,
                        Y_HL_1_1,
                        enable_Y_HL_1_1,
                        Y_LH_1_1,
                        enable_Y_LH_1_1,
                        Y_HH_1_1,
                        enable_Y_HH_1_1,

                        U_LL_5_1,
                        enable_U_LL_5_1,
                        U_HL_5_1,
                        enable_U_HL_5_1,
                        U_HL_4_1,
                        enable_U_HL_4_1,
                        U_HL_3_1,
                        enable_U_HL_3_1,    
                        U_HL_2_1,
                        enable_U_HL_2_1,
                        U_HL_1_1,
                        enable_U_HL_1_1,
                        U_LH_1_1,
                        enable_U_LH_1_1,
                        U_HH_1_1,
                        enable_U_HH_1_1,


                        V_LL_5_1,
                        enable_V_LL_5_1,
                        V_HL_5_1,
                        enable_V_HL_5_1,
                        V_HL_4_1,
                        enable_V_HL_4_1,
                        V_HL_3_1,
                        enable_V_HL_3_1,
                        V_HL_2_1,
                        enable_V_HL_2_1,
                        V_HL_1_1,
                        enable_V_HL_1_1,
                        V_LH_1_1,
                        enable_V_LH_1_1,
                        V_HH_1_1,
                        enable_V_HH_1_1,

                        wv_out1,
                        wv_out2,
                        wv_out3,
                        wv_out4
                );
//定义输入输出端口
    input clk;
    input rst;
    
    input[12:0] image_width;
    input[12:0] image_height; 
	
    input[11:0] Y_LL_5_1;
    input[11:0] Y_HL_5_1;
    input[11:0] Y_HL_4_1;
    input[11:0] Y_HL_3_1;
    input[11:0] Y_HL_2_1;
    input[11:0] Y_HL_1_1;
    input[11:0] Y_LH_1_1;
    input[11:0] Y_HH_1_1;

    input[11:0] U_LL_5_1;
    input[11:0] U_HL_5_1;
    input[11:0] U_HL_4_1;
    input[11:0] U_HL_3_1;
    input[11:0] U_HL_2_1;
    input[11:0] U_HL_1_1;
    input[11:0] U_LH_1_1;
    input[11:0] U_HH_1_1;

    input[11:0] V_LL_5_1;
    input[11:0] V_HL_5_1;
    input[11:0] V_HL_4_1;
    input[11:0] V_HL_3_1;
    input[11:0] V_HL_2_1;
    input[11:0] V_HL_1_1;
    input[11:0] V_LH_1_1;
    input[11:0] V_HH_1_1;

    input enable_Y_LL_5_1;
    input enable_Y_HL_5_1;
    input enable_Y_HL_4_1;
    input enable_Y_HL_3_1;
    input enable_Y_HL_2_1;
    input enable_Y_HL_1_1;
    input enable_Y_LH_1_1;
    input enable_Y_HH_1_1;

    input enable_U_LL_5_1;
    input enable_U_HL_5_1;
    input enable_U_HL_4_1;
    input enable_U_HL_3_1;    
    input enable_U_HL_2_1;
    input enable_U_HL_1_1;
    input enable_U_LH_1_1;
    input enable_U_HH_1_1;

    input enable_V_LL_5_1;
    input enable_V_HL_5_1;
    input enable_V_HL_4_1;
    input enable_V_HL_3_1;
    input enable_V_HL_2_1;
    input enable_V_HL_1_1;
    input enable_V_LH_1_1;
    input enable_V_HH_1_1;

    output rdy;
    output[11:0] wv_out1;
    output[11:0] wv_out2;
    output[11:0] wv_out3;
    output[11:0] wv_out4;

    reg rdy;

    reg[11:0] wv_out1;
    reg[11:0] wv_out2;
    reg[11:0] wv_out3;
    reg[11:0] wv_out4;

//定义屿部变釿
	
	  reg precinct_rdy;
    //define the time counter
    reg[27:0]       cnt0;

    reg[27:0] Y_LL_5_1_cnt;
    reg[27:0] Y_HL_5_1_cnt;
    reg[27:0] Y_HL_4_1_cnt;
    reg[27:0] Y_HL_3_1_cnt;
    reg[27:0] Y_HL_2_1_cnt;
    reg[27:0] Y_HL_1_1_cnt;
    reg[27:0] Y_LH_1_1_cnt;
    reg[27:0] Y_HH_1_1_cnt;

    reg[27:0] U_LL_5_1_cnt;
    reg[27:0] U_HL_5_1_cnt;
    reg[27:0] U_HL_4_1_cnt;
    reg[27:0] U_HL_3_1_cnt;
    reg[27:0] U_HL_2_1_cnt;
    reg[27:0] U_HL_1_1_cnt;
    reg[27:0] U_LH_1_1_cnt;
    reg[27:0] U_HH_1_1_cnt;

    reg[27:0] V_LL_5_1_cnt;
    reg[27:0] V_HL_5_1_cnt;
    reg[27:0] V_HL_4_1_cnt;
    reg[27:0] V_HL_3_1_cnt;
    reg[27:0] V_HL_2_1_cnt;
    reg[27:0] V_HL_1_1_cnt;
    reg[27:0] V_LH_1_1_cnt;
    reg[27:0] V_HH_1_1_cnt;

    reg[11:0] wv_band_24[0:127];
    reg[11:0] wv_band_23[0:127];
    reg[11:0] wv_band_22[0:127];
    reg[11:0] wv_band_21[0:127];
    reg[11:0] wv_band_20[0:127];
    reg[11:0] wv_band_19[0:127];
    reg[11:0] wv_band_18[0:255];
    reg[11:0] wv_band_17[0:255];
    reg[11:0] wv_band_16[0:255];
    reg[11:0] wv_band_15[0:511];
    reg[11:0] wv_band_14[0:511];
    reg[11:0] wv_band_13[0:511];
    reg[11:0] wv_band_12[0:1023];
    reg[11:0] wv_band_11[0:1023];
    reg[11:0] wv_band_10[0:1023];
    reg[11:0] wv_band_9[0:2047];
    reg[11:0] wv_band_8[0:2047];
    reg[11:0] wv_band_7[0:2047];
    reg[11:0] wv_band_6[0:2047];
    reg[11:0] wv_band_5[0:2047];
    reg[11:0] wv_band_4[0:2047];
    reg[11:0] wv_band_3[0:2047];
    reg[11:0] wv_band_2[0:2047];
    reg[11:0] wv_band_1[0:2047];
  


    //1-Y_HH_1_1
    always @(posedge clk or negedge rst) begin
      
      if(~rst) begin

        wv_out1 <= 12'd0;
        wv_out2 <= 12'd0;
        wv_out3 <= 12'd0;
        wv_out4 <= 12'd0;
        
        Y_LL_5_1_cnt <= 28'd0;
        Y_HL_5_1_cnt <= 28'd0;
        Y_HL_4_1_cnt <= 28'd0;
        Y_HL_3_1_cnt <= 28'd0;
        Y_HL_2_1_cnt <= 28'd0;
        Y_HL_1_1_cnt <= 28'd0;
        Y_LH_1_1_cnt <= 28'd0;
        Y_HH_1_1_cnt <= 28'd0;

        U_LL_5_1_cnt <= 28'd0;
        U_HL_5_1_cnt <= 28'd0;
        U_HL_4_1_cnt <= 28'd0;
        U_HL_3_1_cnt <= 28'd0;
        U_HL_2_1_cnt <= 28'd0;
        U_HL_1_1_cnt <= 28'd0;
        U_LH_1_1_cnt <= 28'd0;
        U_HH_1_1_cnt <= 28'd0;

        V_LL_5_1_cnt <= 28'd0;
        V_HL_5_1_cnt <= 28'd0;
        V_HL_4_1_cnt <= 28'd0;
        V_HL_3_1_cnt <= 28'd0;
        V_HL_2_1_cnt <= 28'd0;
        V_HL_1_1_cnt <= 28'd0;
        V_LH_1_1_cnt <= 28'd0;
        V_HH_1_1_cnt <= 28'd0;

        cnt0 <= 28'd0;
        rdy <= 0;
        precinct_rdy <= 0;

      end
      else if(enable_Y_HH_1_1) begin

        wv_band_1[Y_HH_1_1_cnt] <= Y_HH_1_1;
        Y_HH_1_1_cnt <= Y_HH_1_1_cnt + 4'd1;

      end
      else begin

        wv_band_1[Y_HH_1_1] <= wv_band_1[Y_HH_1_1];

      end

    end

    //2-U_HH_1_1
    always @(posedge clk) begin
      
      if(enable_U_HH_1_1) begin

        wv_band_2[U_HH_1_1_cnt] <= U_HH_1_1;
        U_HH_1_1_cnt <= U_HH_1_1_cnt + 4'd1;

      end
      else begin

        wv_band_2[U_HH_1_1_cnt] <= wv_band_2[U_HH_1_1_cnt];

      end
    end

    //3-V_HH_1_1
    always @(posedge clk) begin
      
      if(enable_V_HH_1_1) begin

        wv_band_3[V_HH_1_1_cnt] <= V_HH_1_1;
        V_HH_1_1_cnt <= V_HH_1_1_cnt + 4'd1;

      end
      else begin

        wv_band_3[V_HH_1_1_cnt] <= wv_band_3[V_HH_1_1_cnt];

      end

    end

    

    //4-Y_LH_1_1
    always @(posedge clk) begin
      
      if(enable_Y_LH_1_1) begin

        wv_band_4[Y_LH_1_1_cnt] <=Y_LH_1_1;
        Y_LH_1_1_cnt <= Y_LH_1_1_cnt + 4'd1;

      end
      else begin

        wv_band_4[Y_LH_1_1_cnt] <= wv_band_4[Y_LH_1_1_cnt];

      end

    end

    //5-U_LH_1_1
    always @(posedge clk) begin
      
      if(enable_U_LH_1_1) begin

        wv_band_5[U_LH_1_1_cnt] <=U_LH_1_1;
        U_LH_1_1_cnt <= U_LH_1_1_cnt + 4'd1;

      end
      else begin

        wv_band_5[U_LH_1_1_cnt] <= wv_band_5[U_LH_1_1_cnt];

      end

    end

    //6-V_LH_1_1
    always @(posedge clk) begin
      
      if(enable_V_LH_1_1) begin

        wv_band_6[V_LH_1_1_cnt] <=V_LH_1_1;
        V_LH_1_1_cnt <= V_LH_1_1_cnt + 4'd1;

      end
      else begin

        wv_band_6[V_LH_1_1_cnt] <= wv_band_6[V_LH_1_1_cnt];

      end

    end

    //7-Y_HL_1_1
    always @(posedge clk) begin
      
      if(enable_Y_HL_1_1) begin

        wv_band_7[Y_HL_1_1_cnt] <=Y_HL_1_1;
        Y_HL_1_1_cnt <= Y_HL_1_1_cnt + 4'd1;

      end
      else begin

        wv_band_7[Y_HL_1_1_cnt] <= wv_band_7[Y_HL_1_1_cnt];

      end

    end

    //8-U_HL_1_1
    always @(posedge clk) begin
      
      if(enable_U_HL_1_1) begin

        wv_band_8[U_HL_1_1_cnt] <=U_HL_1_1;
        U_HL_1_1_cnt <= U_HL_1_1_cnt + 4'd1;

      end
      else begin

        wv_band_8[U_HL_1_1_cnt] <= wv_band_8[U_HL_1_1_cnt];

      end

    end

    //9-V_HL_1_1
    always @(posedge clk) begin
      
      if(enable_V_HL_1_1) begin

        wv_band_9[V_HL_1_1_cnt] <=V_HL_1_1;
        V_HL_1_1_cnt <= V_HL_1_1_cnt + 4'd1;

      end
      else begin

        wv_band_9[V_HL_1_1_cnt] <= wv_band_9[V_HL_1_1_cnt];

      end

    end

    //10-Y_HL_2_1
    always @(posedge clk) begin
      
      if(enable_Y_HL_2_1) begin

        wv_band_10[Y_HL_2_1_cnt] <=Y_HL_2_1;
        Y_HL_2_1_cnt <= Y_HL_2_1_cnt + 4'd1;

      end
      else begin

        wv_band_10[Y_HL_2_1_cnt] <= wv_band_10[Y_HL_2_1_cnt];

      end

    end

    //11-U_HL_2_1
    always @(posedge clk) begin
      
      if(enable_U_HL_2_1) begin

        wv_band_11[U_HL_2_1_cnt] <=U_HL_2_1;
        U_HL_2_1_cnt <= U_HL_2_1_cnt + 4'd1;

      end
      else begin

        wv_band_11[U_HL_2_1_cnt] <= wv_band_11[U_HL_2_1_cnt];

      end

    end

    //12-V_HL_2_1
    always @(posedge clk) begin
      
      if(enable_V_HL_2_1) begin

        wv_band_12[V_HL_2_1_cnt] <=V_HL_2_1;
        V_HL_2_1_cnt <= V_HL_2_1_cnt + 4'd1;

      end
      else begin

        wv_band_12[V_HL_2_1_cnt] <= wv_band_12[V_HL_2_1_cnt];

      end

    end

    //13-Y_HL_3_1
    always @(posedge clk) begin
      
      if(enable_Y_HL_3_1) begin

        wv_band_13[Y_HL_3_1_cnt] <=Y_HL_3_1;
        Y_HL_3_1_cnt <= Y_HL_3_1_cnt + 4'd1;

      end
      else begin

        wv_band_13[Y_HL_3_1_cnt] <= wv_band_13[Y_HL_3_1_cnt];

      end

    end

    //14-U_HL_3_1
    always @(posedge clk) begin
      
      if(enable_U_HL_3_1) begin

        wv_band_14[U_HL_3_1_cnt] <= U_HL_3_1;
        U_HL_3_1_cnt <= U_HL_3_1_cnt + 4'd1;

      end
      else begin

        wv_band_14[U_HL_3_1_cnt] <= wv_band_14[U_HL_3_1_cnt];

      end

    end

    //15-V_HL_3_1
    always @(posedge clk) begin
      
      if(enable_V_HL_3_1) begin

        wv_band_15[V_HL_3_1_cnt] <=V_HL_3_1;
        V_HL_3_1_cnt <= V_HL_3_1_cnt + 4'd1;

      end
      else begin

        wv_band_15[V_HL_3_1_cnt] <= wv_band_15[V_HL_3_1_cnt];

      end

    end

    //16-Y_HL_4_1
    always @(posedge clk) begin
      
      if(enable_Y_HL_4_1) begin

        wv_band_16[Y_HL_4_1_cnt] <=Y_HL_4_1;
        Y_HL_4_1_cnt <= Y_HL_4_1_cnt + 4'd1;

      end
      else begin

        wv_band_16[Y_HL_4_1_cnt] <= wv_band_16[Y_HL_4_1_cnt];

      end

    end

    //17-U_HL_4_1
    always @(posedge clk) begin
      
      if(enable_U_HL_4_1) begin

        wv_band_17[U_HL_4_1_cnt] <=U_HL_4_1;
        U_HL_4_1_cnt <= U_HL_4_1_cnt + 4'd1;

      end
      else begin

        wv_band_17[U_HL_4_1_cnt] <= wv_band_17[U_HL_4_1_cnt];

      end

    end

    //18-V_HL_4_1
    always @(posedge clk) begin
      
      if(enable_V_HL_4_1) begin

        wv_band_18[V_HL_4_1_cnt] <=V_HL_4_1;
        V_HL_4_1_cnt <= V_HL_4_1_cnt + 4'd1;

      end
      else begin

        wv_band_18[V_HL_4_1_cnt] <= wv_band_18[V_HL_4_1_cnt];

      end

    end

    //19-Y_HL_5_1
    always @(posedge clk) begin
      
      if(enable_Y_HL_5_1) begin

        wv_band_19[Y_HL_5_1_cnt] <=Y_HL_5_1;
        Y_HL_5_1_cnt <= Y_HL_5_1_cnt + 4'd1;

      end
      else begin

        wv_band_19[Y_HL_5_1_cnt] <= wv_band_19[Y_HL_5_1_cnt];

      end

    end

    //20-U_HL_5_1
    always @(posedge clk) begin
      
      if(enable_U_HL_5_1) begin

        wv_band_20[U_HL_5_1_cnt] <=U_HL_5_1;
        U_HL_5_1_cnt <= U_HL_5_1_cnt + 4'd1;

      end
      else begin

        wv_band_20[U_HL_5_1_cnt] <= wv_band_20[U_HL_5_1_cnt];

      end

    end

    //21-V_HL_5_1
    always @(posedge clk) begin
      
      if(enable_V_HL_5_1) begin

        wv_band_21[V_HL_5_1_cnt] <=V_HL_5_1;
        V_HL_5_1_cnt <= V_HL_5_1_cnt + 4'd1;

      end
      else begin

        wv_band_21[V_HL_5_1_cnt] <= wv_band_21[V_HL_5_1_cnt];

      end

    end

    //22-Y_LL_5_1
    always @(posedge clk) begin
      
      if(enable_Y_LL_5_1) begin

        wv_band_22[Y_LL_5_1_cnt] <=Y_LL_5_1;
        Y_LL_5_1_cnt <= Y_LL_5_1_cnt + 4'd1;

      end
      else begin

        wv_band_22[Y_LL_5_1_cnt] <= wv_band_22[Y_LL_5_1_cnt];

      end

    end

    //23-U_LL_5_1
    always @(posedge clk) begin
      
      if(enable_U_LL_5_1) begin

        wv_band_23[U_LL_5_1_cnt] <=U_LL_5_1;
        U_LL_5_1_cnt <= U_LL_5_1_cnt + 4'd1;

      end
      else begin

        wv_band_23[U_LL_5_1_cnt] <= wv_band_23[U_LL_5_1_cnt];

      end

    end

    //24-V_LL_5_1
    always @(posedge clk) begin
      
      if(enable_V_LL_5_1) begin

        wv_band_24[V_LL_5_1_cnt] <=V_LL_5_1;
        V_LL_5_1_cnt <= V_LL_5_1_cnt + 4'd1;

      end
      else begin

        wv_band_24[V_LL_5_1_cnt] <= wv_band_24[V_LL_5_1_cnt];

      end

    end



    //判断precin存储完成标志
    always @(posedge clk ) begin
      
      if(Y_LL_5_1_cnt == (image_width >> 5) ) begin
        
        precinct_rdy <= 1'd1;

      end
      else begin
        
        precinct_rdy <= precinct_rdy;
        
      end
      
    end
    
	
	//***************
	
	
	
	
    //接收完毕，开始输凿
    always @(posedge clk) begin

      if(precinct_rdy) begin
        
        if(cnt0 < (image_width >> 5) ) begin
          
          wv_out1 <= wv_band_22[cnt0];
          wv_out2 <= wv_band_22[cnt0 + 1];
          wv_out3 <= wv_band_22[cnt0 + 2];
          wv_out4 <= wv_band_22[cnt0 + 3];

          cnt0 <= cnt0 + 6'd4;

          rdy <= 1;

        end
        else if(cnt0 < (image_width >> 5) * 2) begin

          wv_out1 <= wv_band_23[cnt0 - (image_width >> 5)];
          wv_out2 <= wv_band_23[cnt0 - (image_width >> 5) + 1];
          wv_out3 <= wv_band_23[cnt0 - (image_width >> 5) + 2];
          wv_out4 <= wv_band_23[cnt0 - (image_width >> 5) + 3];

          cnt0 <= cnt0 + 6'd4;

        end
        else if(cnt0 < (image_width >> 5) * 3) begin
          
          wv_out1 <= wv_band_24[cnt0 - (image_width >> 5) * 2];
          wv_out2 <= wv_band_24[cnt0 - (image_width >> 5) * 2 + 1];
          wv_out3 <= wv_band_24[cnt0 - (image_width >> 5) * 2 + 2];
          wv_out4 <= wv_band_24[cnt0 - (image_width >> 5) * 2 + 3];

          cnt0 <= cnt0 + 6'd4;

        end
        else if(cnt0 < (image_width >> 5) * 4) begin
          
          wv_out1 <= wv_band_19[cnt0 - (image_width >> 5) * 3];
          wv_out2 <= wv_band_19[cnt0 - (image_width >> 5) * 3 + 1];
          wv_out3 <= wv_band_19[cnt0 - (image_width >> 5) * 3 + 2];
          wv_out4 <= wv_band_19[cnt0 - (image_width >> 5) * 3 + 3];

          cnt0 <= cnt0 + 6'd4;

        end
        else if(cnt0 < (image_width >> 5) * 5) begin
          
          wv_out1 <= wv_band_20[cnt0 - (image_width >> 5) * 4];
          wv_out2 <= wv_band_20[cnt0 - (image_width >> 5) * 4 + 1];
          wv_out3 <= wv_band_20[cnt0 - (image_width >> 5) * 4 + 2];
          wv_out4 <= wv_band_20[cnt0 - (image_width >> 5) * 4 + 3];

          cnt0 <= cnt0 + 6'd4;

        end
        else if(cnt0 < (image_width >> 5) * 6) begin
          
          wv_out1 <= wv_band_21[cnt0 - (image_width >> 5) * 5];
          wv_out2 <= wv_band_21[cnt0 - (image_width >> 5) * 5 + 1];
          wv_out3 <= wv_band_21[cnt0 - (image_width >> 5) * 5 + 2];
          wv_out4 <= wv_band_21[cnt0 - (image_width >> 5) * 5 + 3];

          cnt0 <= cnt0 + 6'd4;

        end
        else if(cnt0 < (image_width >> 4) * 4) begin
          
          wv_out1 <= wv_band_16[cnt0 - (image_width >> 4) * 3];
          wv_out2 <= wv_band_16[cnt0 - (image_width >> 4) * 3 + 1];
          wv_out3 <= wv_band_16[cnt0 - (image_width >> 4) * 3 + 2];
          wv_out4 <= wv_band_16[cnt0 - (image_width >> 4) * 3 + 3];

          cnt0 <= cnt0 + 6'd4;

        end
        else if(cnt0 < (image_width >> 4) * 5) begin
          
          wv_out1 <= wv_band_17[cnt0 - (image_width >> 4) * 4];
          wv_out2 <= wv_band_17[cnt0 - (image_width >> 4) * 4 + 1];
          wv_out3 <= wv_band_17[cnt0 - (image_width >> 4) * 4 + 2];
          wv_out4 <= wv_band_17[cnt0 - (image_width >> 4) * 4 + 3];

          cnt0 <= cnt0 + 6'd4;

        end
        else if(cnt0 < (image_width >> 4) * 6 ) begin
          
          wv_out1 <= wv_band_18[cnt0 - (image_width >> 4) * 5];
          wv_out2 <= wv_band_18[cnt0 - (image_width >> 4) * 5 + 1];
          wv_out3 <= wv_band_18[cnt0 - (image_width >> 4) * 5 + 2];
          wv_out4 <= wv_band_18[cnt0 - (image_width >> 4) * 5 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 3) * 4) begin
          
          wv_out1 <= wv_band_13[cnt0 - (image_width >> 3) * 3];
          wv_out2 <= wv_band_13[cnt0 - (image_width >> 3) * 3 + 1];
          wv_out3 <= wv_band_13[cnt0 - (image_width >> 3) * 3 + 2];
          wv_out4 <= wv_band_13[cnt0 - (image_width >> 3) * 3 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 3) * 5) begin
          
          wv_out1 <= wv_band_14[cnt0 - (image_width >> 3) * 4];
          wv_out2 <= wv_band_14[cnt0 - (image_width >> 3) * 4 + 1];
          wv_out3 <= wv_band_14[cnt0 - (image_width >> 3) * 4 + 2];
          wv_out4 <= wv_band_14[cnt0 - (image_width >> 3) * 4 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 3) * 6) begin
          
          wv_out1 <= wv_band_15[cnt0 - (image_width >> 3) * 5];
          wv_out2 <= wv_band_15[cnt0 - (image_width >> 3) * 5 + 1];
          wv_out3 <= wv_band_15[cnt0 - (image_width >> 3) * 5 + 2];
          wv_out4 <= wv_band_15[cnt0 - (image_width >> 3) * 5 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 2) * 4) begin
          
          wv_out1 <= wv_band_10[cnt0 - (image_width >> 2) * 3];
          wv_out2 <= wv_band_10[cnt0 - (image_width >> 2) * 3 + 1];
          wv_out3 <= wv_band_10[cnt0 - (image_width >> 2) * 3 + 2];
          wv_out4 <= wv_band_10[cnt0 - (image_width >> 2) * 3 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 2) * 5) begin
          
          wv_out1 <= wv_band_11[cnt0 - (image_width >> 2) * 4];
          wv_out2 <= wv_band_11[cnt0 - (image_width >> 2) * 4 + 1];
          wv_out3 <= wv_band_11[cnt0 - (image_width >> 2) * 4 + 2];
          wv_out4 <= wv_band_11[cnt0 - (image_width >> 2) * 4 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 2) * 6) begin
          
          wv_out1 <= wv_band_12[cnt0 - (image_width >> 2) * 5];
          wv_out2 <= wv_band_12[cnt0 - (image_width >> 2) * 5 + 1];
          wv_out3 <= wv_band_12[cnt0 - (image_width >> 2) * 5 + 2];
          wv_out4 <= wv_band_12[cnt0 - (image_width >> 2) * 5 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 1) * 4) begin
          
          wv_out1 <= wv_band_7[cnt0 - (image_width >> 1) * 3];
          wv_out2 <= wv_band_7[cnt0 - (image_width >> 1) * 3 + 1];
          wv_out3 <= wv_band_7[cnt0 - (image_width >> 1) * 3 + 2];
          wv_out4 <= wv_band_7[cnt0 - (image_width >> 1) * 3 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 1) * 5) begin
          
          wv_out1 <= wv_band_8[cnt0 - (image_width >> 1) * 4];
          wv_out2 <= wv_band_8[cnt0 - (image_width >> 1) * 4 + 1];
          wv_out3 <= wv_band_8[cnt0 - (image_width >> 1) * 4 + 2];
          wv_out4 <= wv_band_8[cnt0 - (image_width >> 1) * 4 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 1) * 6) begin
          
          wv_out1 <= wv_band_9[cnt0 - (image_width >> 1) * 5];
          wv_out2 <= wv_band_9[cnt0 - (image_width >> 1) * 5 + 1];
          wv_out3 <= wv_band_9[cnt0 - (image_width >> 1) * 5 + 2];
          wv_out4 <= wv_band_9[cnt0 - (image_width >> 1) * 5 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 1) * 7 ) begin
          
          wv_out1 <= wv_band_4[cnt0 - (image_width >> 1) * 6];
          wv_out2 <= wv_band_4[cnt0 - (image_width >> 1) * 6 + 1];
          wv_out3 <= wv_band_4[cnt0 - (image_width >> 1) * 6 + 2];
          wv_out4 <= wv_band_4[cnt0 - (image_width >> 1) * 6 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 1) * 8 ) begin
          
          wv_out1 <= wv_band_5[cnt0 - (image_width >> 1) * 7];
          wv_out2 <= wv_band_5[cnt0 - (image_width >> 1) * 7 + 1];
          wv_out3 <= wv_band_5[cnt0 - (image_width >> 1) * 7 + 2];
          wv_out4 <= wv_band_5[cnt0 - (image_width >> 1) * 7 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 1) * 9 ) begin
          
          wv_out1 <= wv_band_6[cnt0 - (image_width >> 1) * 8];
          wv_out2 <= wv_band_6[cnt0 - (image_width >> 1) * 8 + 1];
          wv_out3 <= wv_band_6[cnt0 - (image_width >> 1) * 8 + 2];
          wv_out4 <= wv_band_6[cnt0 - (image_width >> 1) * 8 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 1) * 10 ) begin
          
          wv_out1 <= wv_band_1[cnt0 - (image_width >> 1) * 9];
          wv_out2 <= wv_band_1[cnt0 - (image_width >> 1) * 9 + 1];
          wv_out3 <= wv_band_1[cnt0 - (image_width >> 1) * 9 + 2];
          wv_out4 <= wv_band_1[cnt0 - (image_width >> 1) * 9 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else if(cnt0 < (image_width >> 1) * 11 ) begin
          
          wv_out1 <= wv_band_2[cnt0 - (image_width >> 1) * 10];
          wv_out2 <= wv_band_2[cnt0 - (image_width >> 1) * 10 + 1];
          wv_out3 <= wv_band_2[cnt0 - (image_width >> 1) * 10 + 2];
          wv_out4 <= wv_band_2[cnt0 - (image_width >> 1) * 10 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
        else begin
          
          wv_out1 <= wv_band_3[cnt0 - (image_width >> 1) * 11];
          wv_out2 <= wv_band_3[cnt0 - (image_width >> 1) * 11 + 1];
          wv_out3 <= wv_band_3[cnt0 - (image_width >> 1) * 11 + 2];
          wv_out4 <= wv_band_3[cnt0 - (image_width >> 1) * 11 + 3];

          cnt0 <= cnt0 + 6'd4;
       
        end
       end

      else begin

        cnt0 <= cnt0;
        
      end
      
    end

endmodule
