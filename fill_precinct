`timescale 1ns/10ps

//把转存下的小波系数，划分为precinct，以precinct为单位输出，为位平面数计算做准备〿

module fill_precinct(   clk, 
                        rst, 
                        rdy,

                        image_width,
                        image_height,

                        Y_LL_5_1,
                        enable_Y_LL_5_1,
                        Y_HL_5_1,
                        enable_Y_HL_5_1,
                        Y_HL_4_1,
                        enable_Y_HL_4_1,
                        Y_HL_3_1,
                        enable_Y_HL_3_1,
                        Y_HL_2_1,
                        enable_Y_HL_2_1,
                        Y_HL_1_1,
                        enable_Y_HL_1_1,
                        Y_LH_1_1,
                        enable_Y_LH_1_1,
                        Y_HH_1_1,
                        enable_Y_HH_1_1,

                        U_LL_5_1,
                        enable_U_LL_5_1,
                        U_HL_5_1,
                        enable_U_HL_5_1,
                        U_HL_4_1,
                        enable_U_HL_4_1,
                        U_HL_3_1,
                        enable_U_HL_3_1,    
                        U_HL_2_1,
                        enable_U_HL_2_1,
                        U_HL_1_1,
                        enable_U_HL_1_1,
                        U_LH_1_1,
                        enable_U_LH_1_1,
                        U_HH_1_1,
                        enable_U_HH_1_1,


                        V_LL_5_1,
                        enable_V_LL_5_1,
                        V_HL_5_1,
                        enable_V_HL_5_1,
                        V_HL_4_1,
                        enable_V_HL_4_1,
                        V_HL_3_1,
                        enable_V_HL_3_1,
                        V_HL_2_1,
                        enable_V_HL_2_1,
                        V_HL_1_1,
                        enable_V_HL_1_1,
                        V_LH_1_1,
                        enable_V_LH_1_1,
                        V_HH_1_1,
                        enable_V_HH_1_1,

                        wv_out1,
                        wv_out2,
                        wv_out3,
                        wv_out4
                );
//定义输入输出端口
    input clk;
    input rst;
    
    input[12:0] image_width;
    input[12:0] image_height; 
	
    input[11:0] Y_LL_5_1;
    input[11:0] Y_HL_5_1;
    input[11:0] Y_HL_4_1;
    input[11:0] Y_HL_3_1;
    input[11:0] Y_HL_2_1;
    input[11:0] Y_HL_1_1;
    input[11:0] Y_LH_1_1;
    input[11:0] Y_HH_1_1;

    input[11:0] U_LL_5_1;
    input[11:0] U_HL_5_1;
    input[11:0] U_HL_4_1;
    input[11:0] U_HL_3_1;
    input[11:0] U_HL_2_1;
    input[11:0] U_HL_1_1;
    input[11:0] U_LH_1_1;
    input[11:0] U_HH_1_1;

    input[11:0] V_LL_5_1;
    input[11:0] V_HL_5_1;
    input[11:0] V_HL_4_1;
    input[11:0] V_HL_3_1;
    input[11:0] V_HL_2_1;
    input[11:0] V_HL_1_1;
    input[11:0] V_LH_1_1;
    input[11:0] V_HH_1_1;

    input enable_Y_LL_5_1;
    input enable_Y_HL_5_1;
    input enable_Y_HL_4_1;
    input enable_Y_HL_3_1;
    input enable_Y_HL_2_1;
    input enable_Y_HL_1_1;
    input enable_Y_LH_1_1;
    input enable_Y_HH_1_1;

    input enable_U_LL_5_1;
    input enable_U_HL_5_1;
    input enable_U_HL_4_1;
    input enable_U_HL_3_1;    
    input enable_U_HL_2_1;
    input enable_U_HL_1_1;
    input enable_U_LH_1_1;
    input enable_U_HH_1_1;

    input enable_V_LL_5_1;
    input enable_V_HL_5_1;
    input enable_V_HL_4_1;
    input enable_V_HL_3_1;
    input enable_V_HL_2_1;
    input enable_V_HL_1_1;
    input enable_V_LH_1_1;
    input enable_V_HH_1_1;

    output rdy;
    output[11:0] wv_out1;
    output[11:0] wv_out2;
    output[11:0] wv_out3;
    output[11:0] wv_out4;

    reg rdy;

    reg[11:0] wv_out1;
    reg[11:0] wv_out2;
    reg[11:0] wv_out3;
    reg[11:0] wv_out4;

//定义屿部变釿
	
	reg precinct_rdy;
    //define the time counter
    reg[27:0]       cnt0;

    reg[27:0] Y_LL_5_1_cnt;
    reg[27:0] Y_HL_5_1_cnt;
    reg[27:0] Y_HL_4_1_cnt;
    reg[27:0] Y_HL_3_1_cnt;
    reg[27:0] Y_HL_2_1_cnt;
    reg[27:0] Y_HL_1_1_cnt;
    reg[27:0] Y_LH_1_1_cnt;
    reg[27:0] Y_HH_1_1_cnt;

    reg[27:0] U_LL_5_1_cnt;
    reg[27:0] U_HL_5_1_cnt;
    reg[27:0] U_HL_4_1_cnt;
    reg[27:0] U_HL_3_1_cnt;
    reg[27:0] U_HL_2_1_cnt;
    reg[27:0] U_HL_1_1_cnt;
    reg[27:0] U_LH_1_1_cnt;
    reg[27:0] U_HH_1_1_cnt;

    reg[27:0] V_LL_5_1_cnt;
    reg[27:0] V_HL_5_1_cnt;
    reg[27:0] V_HL_4_1_cnt;
    reg[27:0] V_HL_3_1_cnt;
    reg[27:0] V_HL_2_1_cnt;
    reg[27:0] V_HL_1_1_cnt;
    reg[27:0] V_LH_1_1_cnt;
    reg[27:0] V_HH_1_1_cnt;

    reg[24575:0] band_Ltype_one[0:8];
    reg[12287:0] band_Ltype_two[0:2];
    reg[6144:0] band_Ltype_three[0:2];
    reg[3071:0] band_Ltype_four[0:2];
    reg[1535:0] band_Ltype_five[0:5];

    //1-Y_HH_1_1
    always @(posedge clk or negedge rst) begin
      
      if(~rst) begin

        wv_out1 <= 12'd0;
        wv_out2 <= 12'd0;
        wv_out3 <= 12'd0;
        wv_out4 <= 12'd0;
        
        Y_LL_5_1_cnt <= 28'd0;
        Y_HL_5_1_cnt <= 28'd0;
        Y_HL_4_1_cnt <= 28'd0;
        Y_HL_3_1_cnt <= 28'd0;
        Y_HL_2_1_cnt <= 28'd0;
        Y_HL_1_1_cnt <= 28'd0;
        Y_LH_1_1_cnt <= 28'd0;
        Y_HH_1_1_cnt <= 28'd0;

        U_LL_5_1_cnt <= 28'd0;
        U_HL_5_1_cnt <= 28'd0;
        U_HL_4_1_cnt <= 28'd0;
        U_HL_3_1_cnt <= 28'd0;
        U_HL_2_1_cnt <= 28'd0;
        U_HL_1_1_cnt <= 28'd0;
        U_LH_1_1_cnt <= 28'd0;
        U_HH_1_1_cnt <= 28'd0;

        V_LL_5_1_cnt <= 28'd0;
        V_HL_5_1_cnt <= 28'd0;
        V_HL_4_1_cnt <= 28'd0;
        V_HL_3_1_cnt <= 28'd0;
        V_HL_2_1_cnt <= 28'd0;
        V_HL_1_1_cnt <= 28'd0;
        V_LH_1_1_cnt <= 28'd0;
        V_HH_1_1_cnt <= 28'd0;

        cnt0 <= 28'd0;
        rdy <= 0;
        precinct_rdy <= 0;

      end
      else if(enable_Y_HH_1_1) begin

        band_Ltype_one[0][Y_HH_1_1_cnt +: 12] <= Y_HH_1_1;
        Y_HH_1_1_cnt <= Y_HH_1_1_cnt + 4'd12;

      end
      else begin

        band_Ltype_one[0] <= band_Ltype_one[0];

      end

    end

    //2-U_HH_1_1
    always @(posedge clk) begin
      
      if(enable_U_HH_1_1) begin

        band_Ltype_one[1][U_HH_1_1_cnt +: 12] <= U_HH_1_1;
        U_HH_1_1_cnt <= U_HH_1_1_cnt + 4'd12;

      end
      else begin
        band_Ltype_one[1] <= band_Ltype_one[1];
      end

    end

    //3-V_HH_1_1
    always @(posedge clk) begin
      
      if(enable_V_HH_1_1) begin

        band_Ltype_one[2][V_HH_1_1_cnt +: 12] <= V_HH_1_1;
        V_HH_1_1_cnt <= V_HH_1_1_cnt + 4'd12;
      
      end
      else begin
        band_Ltype_one[2] <= band_Ltype_one[2];
      end

    end

    //判断precin存储完成标志
    always @(posedge clk ) begin
      
      if(V_HH_1_1_cnt == 27'd192) begin
        
        precinct_rdy <= 1'd1;

      end
      
    end
/*
    //4-Y_LH_1_1
    always @(posedge clk) begin
      
      if(enable_Y_LH_1_1) begin

        band_Ltype_one[3][Y_LH_1_1_cnt +: 12] <= Y_LH_1_1;
        Y_LH_1_1_cnt <= Y_LH_1_1_cnt + 4'd12;

      end
      else begin
        band_Ltype_one[3] <= band_Ltype_one[3];
      end

    end

    //5-U_LH_1_1
    always @(posedge clk) begin
      
      if(enable_U_LH_1_1) begin

        band_Ltype_one[4][U_LH_1_1_cnt +: 12] <= U_LH_1_1;
        U_LH_1_1_cnt <= U_LH_1_1_cnt + 4'd12;

      end
      else begin
        band_Ltype_one[4] <= band_Ltype_one[4];
      end

    end
*/
    //接收完毕，开始输凿
    always @(posedge clk) begin
      if(precinct_rdy) begin
        
        if(cnt0 < (image_width >> 1) * 12 ) begin
          
          wv_out1 <= band_Ltype_one[2][cnt0 +: 12];
          wv_out2 <= band_Ltype_one[2][(cnt0 + 12) +: 12];
          wv_out3 <= band_Ltype_one[2][(cnt0 + 24) +: 12];
          wv_out4 <= band_Ltype_one[2][(cnt0 + 36) +: 12];

          cnt0 <= cnt0 + 6'd48;

          rdy <= 1;

        end
        else if(cnt0 < (image_width >> 1) * 12 * 2) begin

          wv_out1 <= band_Ltype_one[1][cnt0 - (image_width >> 1) * 12 +: 12];
          wv_out2 <= band_Ltype_one[1][cnt0 - (image_width >> 1) * 12 + 12 +: 12];
          wv_out3 <= band_Ltype_one[1][cnt0 - (image_width >> 1) * 12 + 24 +: 12];
          wv_out4 <= band_Ltype_one[1][cnt0 - (image_width >> 1) * 12 + 36 +: 12];

          cnt0 <= cnt0 + 6'd48;

        end
        else begin
          
          wv_out1 <= band_Ltype_one[0][cnt0 - (image_width >> 1) * 24 +: 12];
          wv_out2 <= band_Ltype_one[0][cnt0 - (image_width >> 1) * 24 + 12 +: 12];
          wv_out3 <= band_Ltype_one[0][cnt0 - (image_width >> 1) * 24 + 24 +: 12];
          wv_out4 <= band_Ltype_one[0][cnt0 - (image_width >> 1) * 24 + 36 +: 12];

          cnt0 <= cnt0 + 6'd48;

        end
       
      end
      else begin
        cnt0 <= cnt0;
      end
      
    end

endmodule
